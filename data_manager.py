import os
import openai
import pymongo
from typing import Any, Dict, List
from pymongo.collection import Collection
from IDataManager import IDataManager


class QADataManager(IDataManager):
    """
    QADataManager class is an implementation of the IDataManager interface.
    It provides methods to interact with a MongoDB collection for storing and retrieving QA pairs.
    """

    def __init__(self):
        """
        Initialize the DataManager with the MongoDB URI and get a reference to the QA collection.
        """
        self.mongo_client = pymongo.MongoClient(os.environ["MONGO_URI"])
        self.qa_collection: Collection = self.mongo_client["cncTechnicalAi"]["qa"]

    def create(self, data: Dict[str, Any]) -> None:
        """
        Add a QA pair to the database. Convert the question to a vector and store it in the database to be used for vector search.
        The answer is stored as is. It may be converted to a vector later if we want to use vector search for answers as well.
        """
        embeddings = self.create_vector_embeddings(data["question"])
        self.qa_collection.insert_one(
            {
                "question": data["question"],
                "answer": data["answer"],
                "vector": embeddings,
            }
        )

    def get(self, id: Any) -> Dict[str, Any]:
        """
        Get a QA pair from the database by its ID. The ID is generated by MongoDB when the document is inserted.
        """
        return self.qa_collection.find_one({"_id": id})

    def update(self, id: Any, data: Dict[str, Any]) -> None:
        """
        Update a QA pair in the database. Also convert the new question to a vector to be used for vector search.
        """
        self.qa_collection.update_one(
            {"_id": id},
            {"$set": {"question": data["question"], "answer": data["answer"]}},
        )

    def find(self, query: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
        Find multiple documents in the database that match the query by converting the query to a vector and performing a vector search.
        """
        query_vector = self.create_vector_embeddings(query["question"])
        search_query = {
            "$vectorSearch": {"index": "your_index_name", "query": query_vector}
        }
        return list(self.qa_collection.aggregate([search_query]))

    def delete(self, id: Any) -> None:
        """
        Delete a QA pair from the database by its ID.
        """
        self.qa_collection.delete_one({"_id": id})

    def create_vector_search_index(self):
        """
        Create a vector search index in the MongoDB collection.
        """
        index_definition = {
            "name": "qa_vector_index",
            "type": "vectorSearch",
            "fields": [
                {
                    "type": "vector",
                    "path": "vector",
                    "numDimensions": 768,
                    "similarity": "cosine",
                }
            ],
        }
        self.qa_collection.create_index(index_definition)

    def vector_search(self, index_name, query_vector, filter_query=None):
        """
        Perform a vector search in the MongoDB collection.
        """
        search_query = {"$vectorSearch": {"index": index_name, "query": query_vector}}
        if filter_query:
            search_query["$vectorSearch"]["filter"] = filter_query
        return self.qa_collection.aggregate([search_query])0

    def create_vector_embeddings(self, text):
        """
        Use an ML model or API to generate embeddings for a given text.
        """
        response = openai.Embedding.create(input=[text], model="gpt-3.5-turbo")
        embeddings = response["data"][0]["embedding"]
        return embeddings
